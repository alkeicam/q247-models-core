export const MOCKS = {
    hookEvents:{
        one: {
            gitlog: "commit 5fc617ef5ede5d7ff6ffef0ba3205afe3e2a337e\nAuthor: Maciej Grula <maciej.grula@execon.pl>\nDate:   Sat Jun 8 18:44:46 2024 +0200\n\n    PWR-01 cleaning\n\n index.js | 5 +----\n 1 file changed, 1 insertion(+), 4 deletions(-)\n",
            oper: "commit",
            remote: "/Users/grulka/Documents/Projekty/gitspace/private/grm-microservices/process",
            diff: "commit 5fc617ef5ede5d7ff6ffef0ba3205afe3e2a337e\nAuthor: Maciej Grula <maciej.grula@execon.pl>\nDate:   Sat Jun 8 18:44:46 2024 +0200\n\n    PWR-01 cleaning\n\ndiff --git a/index.js b/index.js\nindex d7c4190..d232a53 100644\n--- a/index.js\n+++ b/index.js\n@@ -101,11 +101,8 @@ function attachNewPostOperation(appHandler, version, path, context, operationHan\n attachNewGetOperation(app, version, path, \"/transition/available/:typeId/:entityId\", manager.availableTransitions.bind(manager));\n attachNewPostOperation(app, version, path, \"/transition/execute/:typeId/:entityId/:transitionCode\", manager.transitionExecute.bind(manager));\n attachNewPostOperation(app, version, path, \"/instance/:typeId/:entityId\", manager.postProcessInstance.bind(manager));\n-\n attachNewGetOperation(app, version, path, \"/instance/:typeId/:entityId\", manager.getProcessInstance.bind(manager));\n-\n attachNewGetOperation(app, version, path, \"/definition/:typeId\", manager.getProcessDefinition.bind(manager));\n attachNewPostOperation(app, version, path, \"/definition/:typeId\", manager.postProcessDefinition.bind(manager));\n \n-attachNewGetOperation(app, version, path, \"/instance/:typeId/:entityId/history\", manager.getProcessInstanceHistory.bind(manager));\n-\n+attachNewGetOperation(app, version, path, \"/instance/:typeId/:entityId/history\", manager.getProcessInstanceHistory.bind(manager));\n\\ No newline at end of file\n",
            account: "a_execon",
            user: "maciej.grula@execon.pl",
            project: "4r3t7x7fj6",
            id: "xj8d6c840o",
            ct: 1718393469569,
            decoded: {
              ticket: "PWR-01",
              ticketPrefix: "PWR",
              commit: "commit 5fc617ef5ede5d7ff6ffef0ba3205afe3e2a337e",
              author: {
                name: "Maciej Grula",
                email: "maciej.grula@execon.pl",
              },
              date: "Date:   Sat Jun 8 18:44:46 2024 +0200",
              message: "PWR-01 cleaning",
              changes: [
                " index.js | 5 +----",
              ],
              changeSummary: {
                raw: " 1 file changed, 1 insertion(+), 4 deletions(-)",
                files: 1,
                inserts: 1,
                deletions: 4,
              },
            },
        },
        two_many_files: {
            gitlog: "commit 50a53e2eb9872a46a6c1359ad7f8ea88d6090a52\nAuthor: Maciej Grula <maciej.grula@execon.pl>\nDate:   Sat Jun 15 11:15:30 2024 +0200\n\n    initial\n\n package.json                               |  94 ++++++++\n readme.MD                                  | 351 +++++++++++++++++++++++++++++\n rollup.config.js                           |  19 ++\n rollup.npmlib.config.js                    |  20 ++\n src/iface/event.ts                         |  24 ++\n src/iface/model.ts                         |  21 ++\n src/implementation/shanon-entropy/index.ts | 125 ++++++++++\n src/q247-models.ts                         |   4 +\n test/data.mock.ts                          |  35 +++\n test/main.test.ts                          |  32 +++\n tsconfig-test.json                         |  69 ++++++\n tsconfig.json                              |  71 ++++++\n 12 files changed, 865 insertions(+)\n",
            oper: "commit",
            remote: "/Users/grulka/Documents/Projekty/gitspace/private/q247-models",
            diff: "commit 50a53e2eb9872a46a6c1359ad7f8ea88d6090a52\nAuthor: Maciej Grula <maciej.grula@execon.pl>\nDate:   Sat Jun 15 11:15:30 2024 +0200\n\n    initial\n\ndiff --git a/package.json b/package.json\nnew file mode 100755\nindex 0000000..45137ea\n--- /dev/null\n+++ b/package.json\n@@ -0,0 +1,94 @@\n+{\n+  \"name\": \"q247-models\",\n+  \"version\": \"0.0.1\",\n+  \"description\": \"Models for effort/calories in q247 plugin\",\n+  \"main\": \"dist/q247-models.umd.js\",\n+  \"types\": \"dist/q247-models.d.ts\",\n+  \"module\": \"dist/q247-models.esm.min.js\",\n+\n+  \"homepage\": \"https://github.com/alkeicam/q247-models\",\n+  \"bugs\": {\n+    \"url\": \"https://github.com/alkeicam/q247-models/issues\"\n+  },\n+  \"keywords\": [\n+    \"q247\",\n+    \"calories\",\n+    \"effort\",\n+    \"plugin\"\n+  ],\n+  \"exports\": {\n+    \".\": {\n+      \"require\": \"./dist/q247-models.umd.min.js\",\n+      \"import\": \"./dist/q247-models.esm.min.js\"\n+    }\n+  },\n+  \"scripts\": {\n+    \"clean\": \"rimraf dist/*\",\n+    \"docs\": \"typedoc --entryPointStrategy expand ./src && touch docs/.nojekyll\",\n+    \"build:types\": \"tsc -t esnext --moduleResolution node -d --emitDeclarationOnly --outFile dist/q247-models.d.ts src/q247-models.ts\",\n+    \"build:js\": \"rollup -c rollup.config.js\",\n+    \"build:minjs:umd\": \"terser dist/q247-models.umd.js --compress --mangle > dist/q247-models.umd.min.js\",\n+    \"build:minjs:esm\": \"terser dist/q247-models.esm.js --compress --mangle > dist/q247-models.esm.min.js\",\n+    \"build:minjs\": \"npm run build:minjs:esm -s && npm run build:minjs:umd -s\",\n+    \"build\": \"date && npm run clean && npm run build:js -s && npm run build:minjs -s && npm run build:types -s\",\n+    \"test\": \"env TS_NODE_PROJECT=\\\"tsconfig-test.json\\\" mocha -r ts-node/register --require source-map-support/register --recursive **/test/**/*.test.ts\",\n+    \"coverage\": \"nyc --reporter html --reporter text npm test\",\n+    \"remote-publish-patch\": \"npm install && npm update && npm run coverage && npm run build && npm version patch && npm publish && git push origin && git push origin --tags\",\n+    \"remote-publish-minor\": \"npm install && npm update && npm run coverage && npm run build && npm version minor && npm publish && git push origin && git push origin --tags\"\n+  },\n+  \"files\": [\n+    \"src\",\n+    \"dist\"\n+  ],\n+  \"author\": \"LaaS Cloud OÜ\",\n+  \"license\": \"ISC\",\n+  \"dependencies\": {    \n+  },\n+  \"devDependencies\": {\n+    \"@rollup/plugin-typescript\": \"^6.1.0\",\n+    \"@rollup/plugin-node-resolve\":\"15.2.3\",\n+    \"@types/chai\": \"4.2.14\",\n+    \"@types/chai-as-promised\": \"7.1.3\",\n+    \"@types/mocha\": \"8.0.3\",\n+    \"@types/node\": \"20.5.0\",\n+    \"@types/sinon\": \"9.0.8\",\n+    \"@typescript-eslint/eslint-plugin\": \"4.6.1\",\n+    \"@typescript-eslint/parser\": \"4.6.1\",\n+    \"chai\": \"^3.5.0\",\n+    \"chai-as-promised\": \"^6.0.0\",\n+    \"eslint\": \"7.12.1\",\n+    \"mocha\": \"^8.4.0\",\n+    \"nyc\": \"14.1.x\",\n+    \"prettier\": \"^2.8.8\",\n+    \"pretty-quick\": \"^3.1.3\",\n+    \"rollup\": \"^2.79.1\",\n+    \"sinon\": \"^9.2.4\",\n+    \"terser\": \"^5.19.2\",\n+    \"ts-node\": \"10.8.2\",\n+    \"tslib\": \"^2.6.2\",\n+    \"typedoc\": \"^0.25.1\",\n+    \"typescript\": \"^5.1.6\",\n+    \"source-map-support\": \"^0.5.21\",\n+    \"rimraf\": \"^5.0.5\",\n+    \"shell-exec\": \"1.1.2\"\n+  },\n+  \"nyc\": {\n+    \"check-coverage\": true,\n+    \"branches\": 100,\n+    \"lines\": 100,\n+    \"functions\": 100,\n+    \"statements\": 100,\n+    \"extension\": [\n+      \".ts\",\n+      \".tsx\"\n+    ],\n+    \"exclude\": [\n+      \"**/*.d.ts\",\n+      \"**/*.js\",\n+      \"**/*.notest.ts\",\n+      \"**/*.mock.ts\",\n+      \"**/*.test.ts\"\n+    ],\n+    \"all\": true\n+  }\n+}\ndiff --git a/readme.MD b/readme.MD\nnew file mode 100644\nindex 0000000..d0de3ea\n--- /dev/null\n+++ b/readme.MD\n@@ -0,0 +1,351 @@\n+\n+\n+# table2object (table to object)\n+Lightweight toolkit for transforming array of rows into a structured Java Script object.\n+\n+## Test coverage\n+\n+```\n+  table2object\n+    Transformer\n+      ✓ rows are split accordingly to structure\n+      ✓ accumulators are applied accordingly to structure and specification\n+      ✓ grouping can be done using custom function generators (52ms)\n+\n+\n+  3 passing (63ms)\n+\n+------------------|----------|----------|----------|----------|-------------------|\n+File              |  % Stmts | % Branch |  % Funcs |  % Lines | Uncovered Line #s |\n+------------------|----------|----------|----------|----------|-------------------|\n+All files         |      100 |      100 |      100 |      100 |                   |\n+ src              |        0 |        0 |        0 |        0 |                   |\n+  table2object.ts |        0 |        0 |        0 |        0 |                   |\n+ src/logic        |      100 |      100 |      100 |      100 |                   |\n+  accumulators.ts |      100 |      100 |      100 |      100 |                   |\n+  generators.ts   |      100 |      100 |      100 |      100 |                   |\n+  transformer.ts  |      100 |      100 |      100 |      100 |                   |\n+------------------|----------|----------|----------|----------|-------------------|\n+```\n+\n+## Install\n+As a library:\n+\n+```\n+$ npm install table2object --save\n+```\n+\n+## Use\n+\n+### Import library\n+```\n+import {Specification, transformer} from \"../src/table2object\"\n+import {AccumulatorsFactory} from \"../src/table2object\"\n+import {GeneratorsFactory} from \"../src/table2object\"\n+```\n+\n+### Structure by selected columns\n+Transform array - build structure grouping by selected columns\n+\n+\n+```\n+const data = [{},...,{}] // some array of rows/objects\n+\n+const specs:Specification = {                \n+        propName: \"account\", // top level grouping - rows will be grouped by \"account\" column values\n+        next: {\n+            propName: \"project\", // middle level grouping - rows will be grouped by \"project\" column values\n+            next: {\n+                propName: \"oper\" // lowest level grouping - rows will be grouped by \"oper\" column values\n+            }\n+        }\n+    }\n+const result = transformer.transform(data, specs);\n+```\n+\n+### Structure and generate aggregate values\n+Transform array with aggregates - build structure grouping by selected columns and adding accumulation/aggregate values\n+\n+\n+```\n+const data = [{},...,{}] // some array of rows/objects\n+\n+const specs:Specification = {                \n+        propName: \"account\", // top level grouping - rows will be grouped by \"account\" column values\n+        next: {\n+            propName: \"project\", // middle level grouping - rows will be grouped by \"project\" column values\n+            accumulators: [AccumulatorsFactory.count(\"count\")], // for each value in \"project\" column a \"count\" aggregate will be calculated from rows\n+            next: {\n+                propName: \"oper\" // lowest level grouping - rows will be grouped by \"oper\" column values\n+            }\n+        }\n+    }\n+const result = transformer.transform(data, specs);\n+```\n+\n+### Structure by custom function\n+Transform array with aggregates and custom/generated/derived grouping values - build structure grouping by selected columns and adding accumulation/aggregate values, some structure level keys are generated using provided function\n+\n+\n+```\n+const data = [{},...,{}] // some array of rows/objects\n+\n+const specs:Specification = {                \n+        propName: \"account\", // top level grouping - rows will be grouped by \"account\" column values\n+        next: {\n+            propName: \"project\", // middle level grouping - rows will be grouped by \"project\" column values\n+            accumulators: [AccumulatorsFactory.count(\"count\")], // for each value in \"project\" column a \"count\" aggregate will be calculated from rows\n+            next: {\n+                propName: \"oper\" // middle level grouping - rows will be grouped by \"oper\" column values\n+                next: {\n+                  propGenerator: GeneratorsFactory.week(\"timestampColumn\"), // lowest level grouping - rows will be grouped by week number calculated from \"timestampColumn\" from data rows\n+                }\n+            }\n+        }\n+    }\n+const result = transformer.transform(data, specs);\n+```\n+\n+### Examples\n+\n+Rows data:\n+\n+```\n+[\n+  {\n+    oper: 'commit',\n+    account: 'acct1',\n+    user: 'albert.einstein@mail.com',\n+    project: 'project1',\n+    id: 'wqp2yz9ibz8',\n+    decoded: {\n+      commit: 'commit 861c46520ff1c198a621510b6fae3bf8cebdac74',\n+      changeSummary: [Object]\n+    },\n+    ct: 1693342741795,\n+    e: { ec: 4.161, em: 3.48, et: 0, er: 4.818, ed: 4.194, e: 16.653 },\n+    s: 116.7,\n+    _rid: 'SLxNAIKMILO0AAAAAAAAAA==',\n+    _self: 'dbs/SLxNAA==/colls/SLxNAIKMILM=/docs/SLxNAIKMILO0AAAAAAAAAA==/',\n+    _etag: '\"d9001d2f-0000-0700-0000-64ee5c250000\"',\n+    _attachments: 'attachments/',\n+    _ts: 1693342757\n+  },\n+  {\n+    oper: 'push',\n+    account: 'acct1',\n+    user: 'albert.einstein@mail.com',\n+    project: 'project2',\n+    id: '12jjb85rdce9',\n+    decoded: {\n+      commit: 'commit 9cd9a5adbbfbb842f220e32643502bd2f35ef8d0',\n+      changeSummary: [Object]\n+    },\n+    ct: 1693342968768,\n+    e: { ec: 4.036, em: 2.617, et: 0, er: 5.097, ed: 0, e: 11.75 },\n+    s: 13,\n+    _rid: 'SLxNAIKMILO1AAAAAAAAAA==',\n+    _self: 'dbs/SLxNAA==/colls/SLxNAIKMILM=/docs/SLxNAIKMILO1AAAAAAAAAA==/',\n+    _etag: '\"d9001f33-0000-0700-0000-64ee5d160000\"',\n+    _attachments: 'attachments/',\n+    _ts: 1693342998\n+  },\n+  {\n+    oper: 'commit',\n+    account: 'acct1',\n+    user: 'john.doe@mail.com',\n+    project: 'project1',\n+    id: '5j4a6shjccq',\n+    decoded: {\n+      commit: 'commit 9cd9a5adbbfbb842f220e32643502bd2f35ef8d0',\n+      changeSummary: [Object]\n+    },\n+    ct: 1693342964497,\n+    e: { ec: 4.036, em: 2.617, et: 0, er: 5.097, ed: 4.963, e: 16.713 },\n+    s: 0.3,\n+    _rid: 'SLxNAIKMILO2AAAAAAAAAA==',\n+    _self: 'dbs/SLxNAA==/colls/SLxNAIKMILM=/docs/SLxNAIKMILO2AAAAAAAAAA==/',\n+    _etag: '\"d9002033-0000-0700-0000-64ee5d160000\"',\n+    _attachments: 'attachments/',\n+    _ts: 1693342998\n+  },\n+  {\n+    oper: 'commit',\n+    account: 'acct1',\n+    user: 'isaac.newton@mail.com',\n+    project: 'project2',\n+    id: '9s7e1ewxaoe',\n+    decoded: {\n+      commit: 'commit 848504a842e81e7141f5e69c79a541ed3e31a6d9',\n+      changeSummary: [Object]\n+    },\n+    ct: 1693344077023,\n+    e: {\n+      ec: 4.085,\n+      em: 1.252,\n+      et: 0,\n+      er: 5.092,\n+      ed: 5.106,\n+      e: 15.534999999999998\n+    },\n+    s: 0.3,\n+    _rid: 'SLxNAIKMILO3AAAAAAAAAA==',\n+    _self: 'dbs/SLxNAA==/colls/SLxNAIKMILM=/docs/SLxNAIKMILO3AAAAAAAAAA==/',\n+    _etag: '\"d900ef47-0000-0700-0000-64ee61510000\"',\n+    _attachments: 'attachments/',\n+    _ts: 1693344082\n+  }\n+]\n+```\n+\n+#### Example #1\n+\n+Specification:\n+```\n+const specs:Specification = {                \n+                propName: \"account\",\n+                next: {\n+                    propName: \"project\",\n+                    next: {\n+                        propName: \"oper\"\n+                    }\n+                }\n+            }\n+```\n+\n+Result:\n+```\n+{\n+  rows: [\n+    {\n+      oper: 'commit',\n+      account: 'acct1',\n+      user: 'albert.einstein@mail.com',\n+      project: 'project1',\n+      id: 'wqp2yz9ibz8',\n+      decoded: [Object],\n+      ct: 1693342741795,\n+      e: [Object],\n+      s: 116.7,\n+      _rid: 'SLxNAIKMILO0AAAAAAAAAA==',\n+      _self: 'dbs/SLxNAA==/colls/SLxNAIKMILM=/docs/SLxNAIKMILO0AAAAAAAAAA==/',\n+      _etag: '\"d9001d2f-0000-0700-0000-64ee5c250000\"',\n+      _attachments: 'attachments/',\n+      _ts: 1693342757\n+    },\n+    {\n+      oper: 'push',\n+      account: 'acct1',\n+      user: 'albert.einstein@mail.com',\n+      project: 'project2',\n+      id: '12jjb85rdce9',\n+      decoded: [Object],\n+      ct: 1693342968768,\n+      e: [Object],\n+      s: 13,\n+      _rid: 'SLxNAIKMILO1AAAAAAAAAA==',\n+      _self: 'dbs/SLxNAA==/colls/SLxNAIKMILM=/docs/SLxNAIKMILO1AAAAAAAAAA==/',\n+      _etag: '\"d9001f33-0000-0700-0000-64ee5d160000\"',\n+      _attachments: 'attachments/',\n+      _ts: 1693342998\n+    },\n+    {\n+      oper: 'commit',\n+      account: 'acct1',\n+      user: 'john.doe@mail.com',\n+      project: 'project1',\n+      id: '5j4a6shjccq',\n+      decoded: [Object],\n+      ct: 1693342964497,\n+      e: [Object],\n+      s: 0.3,\n+      _rid: 'SLxNAIKMILO2AAAAAAAAAA==',\n+      _self: 'dbs/SLxNAA==/colls/SLxNAIKMILM=/docs/SLxNAIKMILO2AAAAAAAAAA==/',\n+      _etag: '\"d9002033-0000-0700-0000-64ee5d160000\"',\n+      _attachments: 'attachments/',\n+      _ts: 1693342998\n+    },\n+    {\n+      oper: 'commit',\n+      account: 'acct1',\n+      user: 'isaac.newton@mail.com',\n+      project: 'project2',\n+      id: '9s7e1ewxaoe',\n+      decoded: [Object],\n+      ct: 1693344077023,\n+      e: [Object],\n+      s: 0.3,\n+      _rid: 'SLxNAIKMILO3AAAAAAAAAA==',\n+      _self: 'dbs/SLxNAA==/colls/SLxNAIKMILM=/docs/SLxNAIKMILO3AAAAAAAAAA==/',\n+      _etag: '\"d900ef47-0000-0700-0000-64ee61510000\"',\n+      _attachments: 'attachments/',\n+      _ts: 1693344082\n+    }\n+  ],\n+  acct1: {\n+    rows: [ [Object], [Object], [Object], [Object] ],\n+    project1: { rows: [Array], commit: [Object] },\n+    project2: { rows: [Array], push: [Object], commit: [Object] }\n+  }\n+}\n+```\n+\n+\n+## API specification\n+\n+### Specification\n+\n+Informs transformer how to change rows of data into a structure of Levels' objects\n+\n+```\n+/**\n+ * Specifies how to transfer array of objects into structure\n+ */\n+interface Specification{\n+    propName: string,\n+    accumulators?: AccumulatorFunction[],\n+    next?: Specification|FunctionalSpecification\n+}\n+/**\n+ * Extension that allows for building structure keys using custom function instead of an existing property/column in\n+ * array data\n+ */\n+interface FunctionalSpecification extends Omit<Specification,\"propName\">{\n+    propGenerator: GeneratorFunction\n+}\n+```\n+\n+### Level\n+\n+Transformation result - structure of levels - structured data holding source rows:\n+```\n+/**\n+ * Building block of a result object that is generated from array of data\n+ */\n+interface Level {   \n+    [index: string]: Level|any\n+    rows?: any[],\n+    accumulators?:Accumulators\n+}\n+```\n+\n+### Accumualators\n+Accumulators calculated accumulated values for each level (where specified)\n+\n+#### AccumulatorsFactory.sum(propName: string, by: string)\n+Calculates sum of values from the \"by\" property of source rows. Result is stored in \"propName\" accumulator property.\n+\n+#### AccumulatorsFactory.sum(propName: string, by: string)\n+Calculates count of rows at given level. Result is stored in \"propName\" accumulator property.\n+\n+### Generators\n+Generators provide custom level grouping keys/properties (instead of using source row columns)\n+\n+#### GeneratorsFactory.day(tsPropName: string)\n+Level will be stored at timestamp day value from a \"tsPropName\" timestamp source row column\n+\n+#### GeneratorsFactory.week(tsPropName: string)\n+Level will be stored at week number (1-52) value from a \"tsPropName\" timestamp source row column.\n+\n+#### GeneratorsFactory.month(tsPropName: string)\n+Level will be stored at timestamp first day of month value from a \"tsPropName\" timestamp source row column.\ndiff --git a/rollup.config.js b/rollup.config.js\nnew file mode 100755\nindex 0000000..e0e131b\n--- /dev/null\n+++ b/rollup.config.js\n@@ -0,0 +1,19 @@\n+import typescript from '@rollup/plugin-typescript';\n+// import { nodeResolve } from '@rollup/plugin-node-resolve';\n+\n+export default {\n+  input: 'src/q247-models.ts',\n+  output: [\n+    {\n+      file: 'dist/q247-models.esm.js',\n+      format: 'es'\n+    },\n+    {\n+      file: 'dist/q247-models.umd.js',\n+      format: 'umd',\n+      name: 'q247-models',\n+    }\n+  ],   \n+  // plugins: [typescript(), nodeResolve()],\n+  plugins: [typescript()],\n+};\ndiff --git a/rollup.npmlib.config.js b/rollup.npmlib.config.js\nnew file mode 100755\nindex 0000000..ce916ec\n--- /dev/null\n+++ b/rollup.npmlib.config.js\n@@ -0,0 +1,20 @@\n+import typescript from '@rollup/plugin-typescript';\n+\n+export default {\n+  input: 'src/gameyngine.ts',\n+  output: [\n+    {\n+      file: 'dist/gameyngine.esm.js',\n+      format: 'es',\n+      globals: { three: 'THREE' }\n+    },\n+    {\n+      file: 'dist/gameyngine.umd.js',\n+      format: 'umd',\n+      name: 'gngine',\n+      globals: { three: 'THREE' }\n+    },\n+  ],\n+  external:['three'],\n+  plugins: [typescript()],\n+};\ndiff --git a/src/iface/event.ts b/src/iface/event.ts\nnew file mode 100644\nindex 0000000..4a537d8\n--- /dev/null\n+++ b/src/iface/event.ts\n@@ -0,0 +1,24 @@\n+export interface Decoded{\n+    ticket:string; // id of the ticket\n+    ticketPrefix:string; //ticket prefix, usually this should map to external project id/code\n+    commit:string; // - commit line with commit hash\n+    author:any // author data\n+    date:string // date line\n+    message:string // change message\n+    changes:string // changes lines\n+    changeSummary:any // summary of changes\n+}\n+export interface Event{\n+    version: string;\n+    oper: \"commit\"|\"push\";\n+    remote: string;\n+    account: string;\n+    user: string;\n+    project: string;\n+    id: string;\n+    decoded: Decoded;\n+    ct: number;\n+    tenantId: string;\n+    gitlog: string;\n+    diff: string\n+}\n\\ No newline at end of file\ndiff --git a/src/iface/model.ts b/src/iface/model.ts\nnew file mode 100644\nindex 0000000..63ce2e8\n--- /dev/null\n+++ b/src/iface/model.ts\n@@ -0,0 +1,21 @@\n+\n+import {Event} from \"./event\";\n+\n+export interface Score {\n+    id: string; // score unique id\n+    model: ScoreModelCard;\n+    event: Event; // source event that was scored\n+}\n+\n+export interface ScalarScore extends Score{    \n+    score: number\n+}\n+\n+export interface ScoreModelCard {\n+    name: string;\n+    version: string;\n+}\n+\n+export interface ScoreModel extends ScoreModelCard{           \n+    score: (event:Event) => Promise<Score>;\n+}\n\\ No newline at end of file\ndiff --git a/src/implementation/shanon-entropy/index.ts b/src/implementation/shanon-entropy/index.ts\nnew file mode 100644\nindex 0000000..d8d68c8\n--- /dev/null\n+++ b/src/implementation/shanon-entropy/index.ts\n@@ -0,0 +1,125 @@\n+import { Event } from \"../../iface/event\";\n+import { ScalarScore, ScoreModel } from \"../../iface/model\";\n+\n+export class ShanonEntropyScoreModelV1 implements ScoreModel {\n+    \n+    name = \"ShanonEntropyScoreModel\";\n+    version = \"1.0\";\n+\n+    score(event: Event): Promise<ScalarScore> {\n+        const scoreScalar = this._score(event);        \n+        return Promise.resolve({\n+            id: `${Math.random().toString(36).substring(2, 12)}`,\n+            model: {\n+                name: this.name,\n+                version: this.version\n+            },\n+            event: event,\n+            score: scoreScalar\n+        })\n+    }    \n+    _score(item:Event){\n+        let score = 0; // initialize score\n+\n+        const entropy = this._calculateEntropyScope(item);\n+\n+        // 1/10 of the entropy score extra can be gained by number of lines\n+        \n+\n+        // you get 100 points for each push\n+        if(item.oper == \"push\"){\n+            score+=13\n+            return score;\n+        }\n+        let insertDelScore = 0\n+        // and point for each insertion, deletion\n+        insertDelScore += item.decoded.changeSummary.inserts;\n+        insertDelScore += item.decoded.changeSummary.deletions;\n+\n+        score = entropy.e*insertDelScore/100\n+\n+        score = parseFloat(score.toFixed(2))\n+\n+        return score;\n+    }\n+\n+    _calculateEntropyScope(gitEvent:Event){\n+        /*\n+        * @typedef {Object} GitEventEntropyScore\n+        * @property {number} ec - commit line entropy\n+        * @property {number} em - commit message entropy\n+        * @property {number} et - ticket entropy\n+        * @property {number} er - raw message entropy\n+        * @property {number} ed - diff entropy\n+        * @property {number} e - final entropy\n+        */\n+        const weights = {\n+            ec: 1,\n+            em: 1,\n+            et: 1,\n+            er: 1,\n+            ed: 1\n+        }        \n+        const entropy = {            \n+            ec: this._entropy(Array.from(gitEvent.decoded.commit||\"\"))*weights[\"ec\"],\n+            em: this._entropy(Array.from(gitEvent.decoded.message||\"\"))*weights[\"em\"],\n+            et: this._entropy(Array.from(gitEvent.decoded.ticket||\"\"))*weights[\"et\"],\n+            er: this._entropy(Array.from(gitEvent.gitlog||\"\"))*weights[\"er\"],\n+            ed: this._entropy(Array.from(gitEvent.diff||\"\"))*weights[\"ed\"],\n+            e: 0,\n+            w: {\n+                ec: this._entropy(gitEvent.decoded.commit?gitEvent.decoded.commit.split(/\\W+/gi):[]),\n+                em: this._entropy(gitEvent.decoded.message?gitEvent.decoded.message.split(/\\W+/gi):[]),\n+                et: this._entropy(gitEvent.decoded.ticket?gitEvent.decoded.ticket.split(/\\W+/gi):[]),\n+                er: this._entropy(gitEvent.gitlog?gitEvent.gitlog.split(/\\W+/gi):[]),\n+                ed: this._entropy(gitEvent.diff?gitEvent.diff.split(/\\W+/gi):[]),\n+            }     \n+        }\n+\n+        entropy.e = entropy.ec+entropy.em+entropy.et+entropy.er+entropy.ed;\n+\n+        return entropy;\n+\n+    }\n+\n+    // _entropy(str:any){\n+    //     const len = str.length\n+ \n+    //     // Build a frequency map from the string.\n+    //     const frequencies:any = Array.from(str)\n+    //       .reduce((freq:any, c:any) => (freq[c] = (freq[c] || 0) + 1) && freq, {})\n+       \n+    //     // Sum the frequency of each character.\n+    //     const sum:any = Object.values(frequencies)\n+    //       .reduce((sum:any, f:any) => sum - f/len * Math.log2(f/len), 0)        \n+    //     return parseFloat(sum.toFixed(3));\n+    // }\n+\n+    _entropy(arr:any[]){\n+        const len = arr.length\n+ \n+        // Build a frequency map from the string.\n+        const frequencies:any = arr\n+          .reduce((freq:any, c:any) => (freq[c] = (freq[c] || 0) + 1) && freq, {})\n+       \n+        // Sum the frequency of each character.\n+        const sum:any = Object.values(frequencies)\n+          .reduce((sum:any, f:any) => sum - f/len * Math.log2(f/len), 0)        \n+        return parseFloat(sum.toFixed(3));\n+    }\n+    // _entropyWords(str:any){\n+    //     const words = str.split(\"\\\\W+\");\n+    //     const len = words.length\n+ \n+    //     // Build a frequency map from the string.\n+    //     const frequencies:any = words\n+    //       .reduce((freq:any, c:any) => (freq[c] = (freq[c] || 0) + 1) && freq, {})\n+       \n+    //     // Sum the frequency of each word.\n+    //     const sum:any = Object.values(frequencies)\n+    //       .reduce((sum:any, f:any) => sum - f/len * Math.log2(f/len), 0)        \n+    //     return parseFloat(sum.toFixed(3));\n+    // }\n+    \n+    \n+}\n\\ No newline at end of file\ndiff --git a/src/q247-models.ts b/src/q247-models.ts\nnew file mode 100644\nindex 0000000..3217067\n--- /dev/null\n+++ b/src/q247-models.ts\n@@ -0,0 +1,4 @@\n+/* istanbul ignore file */\n+export type {ScalarScore, Score, ScoreModel, ScoreModelCard} from \"./iface/model\"\n+export type {Event, Decoded} from \"./iface/event\"\n+export {ShanonEntropyScoreModelV1} from \"./implementation/shanon-entropy\"\ndiff --git a/test/data.mock.ts b/test/data.mock.ts\nnew file mode 100644\nindex 0000000..0e89ebb\n--- /dev/null\n+++ b/test/data.mock.ts\n@@ -0,0 +1,35 @@\n+export const MOCKS = {\n+    hookEvents:{\n+        one: {\n+            gitlog: \"commit 5fc617ef5ede5d7ff6ffef0ba3205afe3e2a337e\\nAuthor: Maciej Grula <maciej.grula@execon.pl>\\nDate:   Sat Jun 8 18:44:46 2024 +0200\\n\\n    PWR-01 cleaning\\n\\n index.js | 5 +----\\n 1 file changed, 1 insertion(+), 4 deletions(-)\\n\",\n+            oper: \"commit\",\n+            remote: \"/Users/grulka/Documents/Projekty/gitspace/private/grm-microservices/process\",\n+            diff: \"commit 5fc617ef5ede5d7ff6ffef0ba3205afe3e2a337e\\nAuthor: Maciej Grula <maciej.grula@execon.pl>\\nDate:   Sat Jun 8 18:44:46 2024 +0200\\n\\n    PWR-01 cleaning\\n\\ndiff --git a/index.js b/index.js\\nindex d7c4190..d232a53 100644\\n--- a/index.js\\n+++ b/index.js\\n@@ -101,11 +101,8 @@ function attachNewPostOperation(appHandler, version, path, context, operationHan\\n attachNewGetOperation(app, version, path, \\\"/transition/available/:typeId/:entityId\\\", manager.availableTransitions.bind(manager));\\n attachNewPostOperation(app, version, path, \\\"/transition/execute/:typeId/:entityId/:transitionCode\\\", manager.transitionExecute.bind(manager));\\n attachNewPostOperation(app, version, path, \\\"/instance/:typeId/:entityId\\\", manager.postProcessInstance.bind(manager));\\n-\\n attachNewGetOperation(app, version, path, \\\"/instance/:typeId/:entityId\\\", manager.getProcessInstance.bind(manager));\\n-\\n attachNewGetOperation(app, version, path, \\\"/definition/:typeId\\\", manager.getProcessDefinition.bind(manager));\\n attachNewPostOperation(app, version, path, \\\"/definition/:typeId\\\", manager.postProcessDefinition.bind(manager));\\n \\n-attachNewGetOperation(app, version, path, \\\"/instance/:typeId/:entityId/history\\\", manager.getProcessInstanceHistory.bind(manager));\\n-\\n+attachNewGetOperation(app, version, path, \\\"/instance/:typeId/:entityId/history\\\", manager.getProcessInstanceHistory.bind(manager));\\n\\\\ No newline at end of file\\n\",\n+            account: \"a_execon\",\n+            user: \"maciej.grula@execon.pl\",\n+            project: \"4r3t7x7fj6\",\n+            id: \"xj8d6c840o\",\n+            ct: 1718393469569,\n+            decoded: {\n+              ticket: \"PWR-01\",\n+              ticketPrefix: \"PWR\",\n+              commit: \"commit 5fc617ef5ede5d7ff6ffef0ba3205afe3e2a337e\",\n+              author: {\n+                name: \"Maciej Grula\",\n+                email: \"maciej.grula@execon.pl\",\n+              },\n+              date: \"Date:   Sat Jun 8 18:44:46 2024 +0200\",\n+              message: \"PWR-01 cleaning\",\n+              changes: [\n+                \" index.js | 5 +----\",\n+              ],\n+              changeSummary: {\n+                raw: \" 1 file changed, 1 insertion(+), 4 deletions(-)\",\n+                files: 1,\n+                inserts: 1,\n+                deletions: 4,\n+              },\n+            },\n+          }\n+        }\n+}\n\\ No newline at end of file\ndiff --git a/test/main.test.ts b/test/main.test.ts\nnew file mode 100644\nindex 0000000..a3ab109\n--- /dev/null\n+++ b/test/main.test.ts\n@@ -0,0 +1,32 @@\n+// import chai, { assert } from 'chai'\n+import chai from 'chai'\n+import chaiAsPromised from 'chai-as-promised'\n+\n+\n+chai.should();\n+chai.use(chaiAsPromised);\n+\n+// const assert = chai.assert;\n+\n+const expect = chai.expect;\n+\n+// import sinon, { SinonStub } from 'sinon';\n+\n+\n+import {ShanonEntropyScoreModelV1, Event} from \"../src/q247-models\"\n+\n+\n+\n+import {MOCKS} from \"./data.mock\"\n+\n+describe(\"Models\",()=>{\n+    describe(\"ShanonEntropyScoreModelV1\",()=>{\n+        it(\"\",async ()=>{\n+            const model = new ShanonEntropyScoreModelV1();            \n+            const score = await model.score((<any>MOCKS.hookEvents.one) as Event);\n+            expect(score.score).gt(0);\n+        })\n+    })\n+})\n+\n+\ndiff --git a/tsconfig-test.json b/tsconfig-test.json\nnew file mode 100755\nindex 0000000..b6b2e1d\n--- /dev/null\n+++ b/tsconfig-test.json\n@@ -0,0 +1,69 @@\n+{\n+  \"compilerOptions\": {\n+    /* Basic Options */\n+    // \"incremental\": true,                   /* Enable incremental compilation */\n+    \"target\": \"ES2019\" /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */,\n+    \"module\": \"commonjs\" /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */,\n+    // \"lib\": [],                             /* Specify library files to be included in the compilation. */\n+    // \"allowJs\": true,                       /* Allow javascript files to be compiled. */\n+    // \"checkJs\": true,                       /* Report errors in .js files. */\n+    // \"jsx\": \"preserve\",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */\n+    // \"declaration\": true,                   /* Generates corresponding '.d.ts' file. */\n+    // \"declarationMap\": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */\n+    // \"sourceMap\": true,                     /* Generates corresponding '.map' file. */\n+    // \"outFile\": \"./\",                       /* Concatenate and emit output to single file. */\n+    // \"outDir\": \"./dist\" /* Redirect output structure to the directory. */,\n+    // \"rootDir\": \"./\",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */\n+    // \"composite\": true,                     /* Enable project compilation */\n+    // \"tsBuildInfoFile\": \"./\",               /* Specify file to store incremental compilation information */\n+    // \"removeComments\": true,                /* Do not emit comments to output. */\n+    // \"noEmit\": true,                        /* Do not emit outputs. */\n+    // \"importHelpers\": true,                 /* Import emit helpers from 'tslib'. */\n+    // \"downlevelIteration\": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */\n+    // \"isolatedModules\": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */\n+\n+    /* Strict Type-Checking Options */\n+    \"strict\": true /* Enable all strict type-checking options. */,\n+    // \"noImplicitAny\": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */\n+    // \"strictNullChecks\": true,              /* Enable strict null checks. */\n+    // \"strictFunctionTypes\": true,           /* Enable strict checking of function types. */\n+    // \"strictBindCallApply\": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */\n+    // \"strictPropertyInitialization\": true,  /* Enable strict checking of property initialization in classes. */\n+    // \"noImplicitThis\": true,                /* Raise error on 'this' expressions with an implied 'any' type. */\n+    // \"alwaysStrict\": true,                  /* Parse in strict mode and emit \"use strict\" for each source file. */\n+\n+    /* Additional Checks */\n+    \"noUnusedLocals\": true /* Report errors on unused locals. */,\n+    \"noUnusedParameters\": true /* Report errors on unused parameters. */,\n+    \"noImplicitReturns\": true /* Report error when not all code paths in function return a value. */,\n+    \"noFallthroughCasesInSwitch\": true /* Report errors for fallthrough cases in switch statement. */,\n+\n+    /* Module Resolution Options */\n+    \"moduleResolution\": \"node\" /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */,\n+    // \"baseUrl\": \"./\",                       /* Base directory to resolve non-absolute module names. */\n+    // \"paths\": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */\n+    // \"rootDirs\": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */\n+    // \"typeRoots\": [],                       /* List of folders to include type definitions from. */\n+    // \"types\": [],                           /* Type declaration files to be included in compilation. */\n+    // \"allowSyntheticDefaultImports\": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */\n+    \"esModuleInterop\": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,\n+    // \"preserveSymlinks\": true,              /* Do not resolve the real path of symlinks. */\n+    // \"allowUmdGlobalAccess\": true,          /* Allow accessing UMD globals from modules. */\n+\n+    /* Source Map Options */\n+    // \"sourceRoot\": \"\",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */\n+    // \"mapRoot\": \"\",                         /* Specify the location where debugger should locate map files instead of generated locations. */\n+    \"inlineSourceMap\": true,               /* Emit a single file with source maps instead of having a separate file. */\n+    // \"inlineSources\": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */\n+\n+    /* Experimental Options */\n+    // \"experimentalDecorators\": true,        /* Enables experimental support for ES7 decorators. */\n+    // \"emitDecoratorMetadata\": true,         /* Enables experimental support for emitting type metadata for decorators. */\n+    \"skipLibCheck\": true,\n+    /* Advanced Options */\n+    \"forceConsistentCasingInFileNames\": true /* Disallow inconsistently-cased references to the same file. */\n+    \n+  },\n+  \"include\": [\"src\"],\n+  \"exclude\": [\"node_modules\", \"dist\", \"**/*.test.ts\", \"**/*.spec.ts\", \"test\", \"coverage\"]\n+}\ndiff --git a/tsconfig.json b/tsconfig.json\nnew file mode 100755\nindex 0000000..373ab17\n--- /dev/null\n+++ b/tsconfig.json\n@@ -0,0 +1,71 @@\n+{\n+  \"compilerOptions\": {\n+    /* Basic Options */\n+    // \"incremental\": true,                   /* Enable incremental compilation */\n+    \"target\": \"ES2019\" /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */,\n+    \"module\": \"esnext\" /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */,\n+    // \"lib\": [],                             /* Specify library files to be included in the compilation. */\n+    // \"allowJs\": true,                       /* Allow javascript files to be compiled. */\n+    // \"checkJs\": true,                       /* Report errors in .js files. */\n+    // \"jsx\": \"preserve\",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */\n+    // \"declaration\": true,                   /* Generates corresponding '.d.ts' file. */\n+    // \"declarationMap\": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */\n+    // \"sourceMap\": true,                     /* Generates corresponding '.map' file. */\n+    // \"outFile\": \"./\",                       /* Concatenate and emit output to single file. */\n+    // \"outDir\": \"./dist\" /* Redirect output structure to the directory. */,\n+    // \"rootDir\": \"./\",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */\n+    // \"composite\": true,                     /* Enable project compilation */\n+    // \"tsBuildInfoFile\": \"./\",               /* Specify file to store incremental compilation information */\n+    // \"removeComments\": true,                /* Do not emit comments to output. */\n+    // \"noEmit\": true,                        /* Do not emit outputs. */\n+    // \"importHelpers\": true,                 /* Import emit helpers from 'tslib'. */\n+    // \"downlevelIteration\": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */\n+    // \"isolatedModules\": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */\n+\n+    /* Strict Type-Checking Options */\n+    \"strict\": true /* Enable all strict type-checking options. */,\n+    // \"noImplicitAny\": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */\n+    // \"strictNullChecks\": true,              /* Enable strict null checks. */\n+    // \"strictFunctionTypes\": true,           /* Enable strict checking of function types. */\n+    // \"strictBindCallApply\": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */\n+    // \"strictPropertyInitialization\": true,  /* Enable strict checking of property initialization in classes. */\n+    // \"noImplicitThis\": true,                /* Raise error on 'this' expressions with an implied 'any' type. */\n+    // \"alwaysStrict\": true,                  /* Parse in strict mode and emit \"use strict\" for each source file. */\n+\n+    /* Additional Checks */\n+    \"noUnusedLocals\": true /* Report errors on unused locals. */,\n+    \"noUnusedParameters\": true /* Report errors on unused parameters. */,\n+    \"noImplicitReturns\": true /* Report error when not all code paths in function return a value. */,\n+    \"noFallthroughCasesInSwitch\": true /* Report errors for fallthrough cases in switch statement. */,\n+\n+    /* Module Resolution Options */\n+    \"moduleResolution\": \"node\" /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */,\n+    // \"baseUrl\": \"./\",                       /* Base directory to resolve non-absolute module names. */\n+    // \"paths\": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */\n+    // \"rootDirs\": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */\n+    // \"typeRoots\": [],                       /* List of folders to include type definitions from. */\n+    \"types\": [\n+      \"node\"\n+    ],                           /* Type declaration files to be included in compilation. */\n+    // \"allowSyntheticDefaultImports\": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */\n+    \"esModuleInterop\": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,\n+    // \"preserveSymlinks\": true,              /* Do not resolve the real path of symlinks. */\n+    // \"allowUmdGlobalAccess\": true,          /* Allow accessing UMD globals from modules. */\n+\n+    /* Source Map Options */\n+    // \"sourceRoot\": \"\",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */\n+    // \"mapRoot\": \"\",                         /* Specify the location where debugger should locate map files instead of generated locations. */\n+    // \"inlineSourceMap\": true,               /* Emit a single file with source maps instead of having a separate file. */\n+    // \"inlineSources\": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */\n+\n+    /* Experimental Options */\n+    // \"experimentalDecorators\": true,        /* Enables experimental support for ES7 decorators. */\n+    // \"emitDecoratorMetadata\": true,         /* Enables experimental support for emitting type metadata for decorators. */\n+    \"skipLibCheck\": true,\n+    /* Advanced Options */\n+    \"forceConsistentCasingInFileNames\": true /* Disallow inconsistently-cased references to the same file. */\n+    \n+  },\n+  \"include\": [\"src\"],\n+  \"exclude\": [\"node_modules\", \"dist\", \"**/*.test.ts\", \"**/*.spec.ts\", \"test\", \"coverage\"]\n+}\n",
            account: "a_execon_group",
            user: "maciej.grula+1@execon.pl",
            project: "otqu6a9qqv",
            id: "ay5x0mfjgaj",
            ct: 1718442930859,
            decoded: {
              ticket: undefined,
              ticketPrefix: undefined,
              commit: "commit 50a53e2eb9872a46a6c1359ad7f8ea88d6090a52",
              author: {
                name: "Maciej Grula",
                email: "maciej.grula@execon.pl",
              },
              date: "Date:   Sat Jun 15 11:15:30 2024 +0200",
              message: "initial",
              changes: [
                " package.json                               |  94 ++++++++",
                " readme.MD                                  | 351 +++++++++++++++++++++++++++++",
                " rollup.config.js                           |  19 ++",
                " rollup.npmlib.config.js                    |  20 ++",
                " src/iface/event.ts                         |  24 ++",
                " src/iface/model.ts                         |  21 ++",
                " src/implementation/shanon-entropy/index.ts | 125 ++++++++++",
                " src/q247-models.ts                         |   4 +",
                " test/data.mock.ts                          |  35 +++",
                " test/main.test.ts                          |  32 +++",
                " tsconfig-test.json                         |  69 ++++++",
                " tsconfig.json                              |  71 ++++++",
              ],
              changeSummary: {
                raw: " 12 files changed, 865 insertions(+)",
                files: 12,
                inserts: 865,
                deletions: 0,
              },
            },
        },
        three_test_data: {
            gitlog: "commit f4eae911de45aa6b80dc05427e95237915159426\nAuthor: Maciej Grula <maciej.grula@execon.pl>\nDate:   Sat Jun 15 11:17:12 2024 +0200\n\n    EXEFPQ247-2 test data preparation\n\n test/data.mock.ts | 42 ++++++++++++++++++++++++++++++++++++++++++\n 1 file changed, 42 insertions(+)\n",
            oper: "commit",
            remote: "/Users/grulka/Documents/Projekty/gitspace/private/q247-models",
            diff: "commit f4eae911de45aa6b80dc05427e95237915159426\nAuthor: Maciej Grula <maciej.grula@execon.pl>\nDate:   Sat Jun 15 11:17:12 2024 +0200\n\n    EXEFPQ247-2 test data preparation\n\ndiff --git a/test/data.mock.ts b/test/data.mock.ts\nindex 0e89ebb..72c2c63 100644\n--- a/test/data.mock.ts\n+++ b/test/data.mock.ts\n@@ -31,5 +31,47 @@ export const MOCKS = {\n               },\n             },\n           }\n+        },\n+        two_many_files: {\n+            gitlog: \"commit 50a53e2eb9872a46a6c1359ad7f8ea88d6090a52\\nAuthor: Maciej Grula <maciej.grula@execon.pl>\\nDate:   Sat Jun 15 11:15:30 2024 +0200\\n\\n    initial\\n\\n package.json                               |  94 ++++++++\\n readme.MD                                  | 351 +++++++++++++++++++++++++++++\\n rollup.config.js                           |  19 ++\\n rollup.npmlib.config.js                    |  20 ++\\n src/iface/event.ts                         |  24 ++\\n src/iface/model.ts                         |  21 ++\\n src/implementation/shanon-entropy/index.ts | 125 ++++++++++\\n src/q247-models.ts                         |   4 +\\n test/data.mock.ts                          |  35 +++\\n test/main.test.ts                          |  32 +++\\n tsconfig-test.json                         |  69 ++++++\\n tsconfig.json                              |  71 ++++++\\n 12 files changed, 865 insertions(+)\\n\",\n+            oper: \"commit\",\n+            remote: \"/Users/grulka/Documents/Projekty/gitspace/private/q247-models\",\n+            diff: \"commit 50a53e2eb9872a46a6c1359ad7f8ea88d6090a52\\nAuthor: Maciej Grula <maciej.grula@execon.pl>\\nDate:   Sat Jun 15 11:15:30 2024 +0200\\n\\n    initial\\n\\ndiff --git a/package.json b/package.json\\nnew file mode 100755\\nindex 0000000..45137ea\\n--- /dev/null\\n+++ b/package.json\\n@@ -0,0 +1,94 @@\\n+{\\n+  \\\"name\\\": \\\"q247-models\\\",\\n+  \\\"version\\\": \\\"0.0.1\\\",\\n+  \\\"description\\\": \\\"Models for effort/calories in q247 plugin\\\",\\n+  \\\"main\\\": \\\"dist/q247-models.umd.js\\\",\\n+  \\\"types\\\": \\\"dist/q247-models.d.ts\\\",\\n+  \\\"module\\\": \\\"dist/q247-models.esm.min.js\\\",\\n+\\n+  \\\"homepage\\\": \\\"https://github.com/alkeicam/q247-models\\\",\\n+  \\\"bugs\\\": {\\n+    \\\"url\\\": \\\"https://github.com/alkeicam/q247-models/issues\\\"\\n+  },\\n+  \\\"keywords\\\": [\\n+    \\\"q247\\\",\\n+    \\\"calories\\\",\\n+    \\\"effort\\\",\\n+    \\\"plugin\\\"\\n+  ],\\n+  \\\"exports\\\": {\\n+    \\\".\\\": {\\n+      \\\"require\\\": \\\"./dist/q247-models.umd.min.js\\\",\\n+      \\\"import\\\": \\\"./dist/q247-models.esm.min.js\\\"\\n+    }\\n+  },\\n+  \\\"scripts\\\": {\\n+    \\\"clean\\\": \\\"rimraf dist/*\\\",\\n+    \\\"docs\\\": \\\"typedoc --entryPointStrategy expand ./src && touch docs/.nojekyll\\\",\\n+    \\\"build:types\\\": \\\"tsc -t esnext --moduleResolution node -d --emitDeclarationOnly --outFile dist/q247-models.d.ts src/q247-models.ts\\\",\\n+    \\\"build:js\\\": \\\"rollup -c rollup.config.js\\\",\\n+    \\\"build:minjs:umd\\\": \\\"terser dist/q247-models.umd.js --compress --mangle > dist/q247-models.umd.min.js\\\",\\n+    \\\"build:minjs:esm\\\": \\\"terser dist/q247-models.esm.js --compress --mangle > dist/q247-models.esm.min.js\\\",\\n+    \\\"build:minjs\\\": \\\"npm run build:minjs:esm -s && npm run build:minjs:umd -s\\\",\\n+    \\\"build\\\": \\\"date && npm run clean && npm run build:js -s && npm run build:minjs -s && npm run build:types -s\\\",\\n+    \\\"test\\\": \\\"env TS_NODE_PROJECT=\\\\\\\"tsconfig-test.json\\\\\\\" mocha -r ts-node/register --require source-map-support/register --recursive **/test/**/*.test.ts\\\",\\n+    \\\"coverage\\\": \\\"nyc --reporter html --reporter text npm test\\\",\\n+    \\\"remote-publish-patch\\\": \\\"npm install && npm update && npm run coverage && npm run build && npm version patch && npm publish && git push origin && git push origin --tags\\\",\\n+    \\\"remote-publish-minor\\\": \\\"npm install && npm update && npm run coverage && npm run build && npm version minor && npm publish && git push origin && git push origin --tags\\\"\\n+  },\\n+  \\\"files\\\": [\\n+    \\\"src\\\",\\n+    \\\"dist\\\"\\n+  ],\\n+  \\\"author\\\": \\\"LaaS Cloud OÜ\\\",\\n+  \\\"license\\\": \\\"ISC\\\",\\n+  \\\"dependencies\\\": {    \\n+  },\\n+  \\\"devDependencies\\\": {\\n+    \\\"@rollup/plugin-typescript\\\": \\\"^6.1.0\\\",\\n+    \\\"@rollup/plugin-node-resolve\\\":\\\"15.2.3\\\",\\n+    \\\"@types/chai\\\": \\\"4.2.14\\\",\\n+    \\\"@types/chai-as-promised\\\": \\\"7.1.3\\\",\\n+    \\\"@types/mocha\\\": \\\"8.0.3\\\",\\n+    \\\"@types/node\\\": \\\"20.5.0\\\",\\n+    \\\"@types/sinon\\\": \\\"9.0.8\\\",\\n+    \\\"@typescript-eslint/eslint-plugin\\\": \\\"4.6.1\\\",\\n+    \\\"@typescript-eslint/parser\\\": \\\"4.6.1\\\",\\n+    \\\"chai\\\": \\\"^3.5.0\\\",\\n+    \\\"chai-as-promised\\\": \\\"^6.0.0\\\",\\n+    \\\"eslint\\\": \\\"7.12.1\\\",\\n+    \\\"mocha\\\": \\\"^8.4.0\\\",\\n+    \\\"nyc\\\": \\\"14.1.x\\\",\\n+    \\\"prettier\\\": \\\"^2.8.8\\\",\\n+    \\\"pretty-quick\\\": \\\"^3.1.3\\\",\\n+    \\\"rollup\\\": \\\"^2.79.1\\\",\\n+    \\\"sinon\\\": \\\"^9.2.4\\\",\\n+    \\\"terser\\\": \\\"^5.19.2\\\",\\n+    \\\"ts-node\\\": \\\"10.8.2\\\",\\n+    \\\"tslib\\\": \\\"^2.6.2\\\",\\n+    \\\"typedoc\\\": \\\"^0.25.1\\\",\\n+    \\\"typescript\\\": \\\"^5.1.6\\\",\\n+    \\\"source-map-support\\\": \\\"^0.5.21\\\",\\n+    \\\"rimraf\\\": \\\"^5.0.5\\\",\\n+    \\\"shell-exec\\\": \\\"1.1.2\\\"\\n+  },\\n+  \\\"nyc\\\": {\\n+    \\\"check-coverage\\\": true,\\n+    \\\"branches\\\": 100,\\n+    \\\"lines\\\": 100,\\n+    \\\"functions\\\": 100,\\n+    \\\"statements\\\": 100,\\n+    \\\"extension\\\": [\\n+      \\\".ts\\\",\\n+      \\\".tsx\\\"\\n+    ],\\n+    \\\"exclude\\\": [\\n+      \\\"**/*.d.ts\\\",\\n+      \\\"**/*.js\\\",\\n+      \\\"**/*.notest.ts\\\",\\n+      \\\"**/*.mock.ts\\\",\\n+      \\\"**/*.test.ts\\\"\\n+    ],\\n+    \\\"all\\\": true\\n+  }\\n+}\\ndiff --git a/readme.MD b/readme.MD\\nnew file mode 100644\\nindex 0000000..d0de3ea\\n--- /dev/null\\n+++ b/readme.MD\\n@@ -0,0 +1,351 @@\\n+\\n+\\n+# table2object (table to object)\\n+Lightweight toolkit for transforming array of rows into a structured Java Script object.\\n+\\n+## Test coverage\\n+\\n+```\\n+  table2object\\n+    Transformer\\n+      ✓ rows are split accordingly to structure\\n+      ✓ accumulators are applied accordingly to structure and specification\\n+      ✓ grouping can be done using custom function generators (52ms)\\n+\\n+\\n+  3 passing (63ms)\\n+\\n+------------------|----------|----------|----------|----------|-------------------|\\n+File              |  % Stmts | % Branch |  % Funcs |  % Lines | Uncovered Line #s |\\n+------------------|----------|----------|----------|----------|-------------------|\\n+All files         |      100 |      100 |      100 |      100 |                   |\\n+ src              |        0 |        0 |        0 |        0 |                   |\\n+  table2object.ts |        0 |        0 |        0 |        0 |                   |\\n+ src/logic        |      100 |      100 |      100 |      100 |                   |\\n+  accumulators.ts |      100 |      100 |      100 |      100 |                   |\\n+  generators.ts   |      100 |      100 |      100 |      100 |                   |\\n+  transformer.ts  |      100 |      100 |      100 |      100 |                   |\\n+------------------|----------|----------|----------|----------|-------------------|\\n+```\\n+\\n+## Install\\n+As a library:\\n+\\n+```\\n+$ npm install table2object --save\\n+```\\n+\\n+## Use\\n+\\n+### Import library\\n+```\\n+import {Specification, transformer} from \\\"../src/table2object\\\"\\n+import {AccumulatorsFactory} from \\\"../src/table2object\\\"\\n+import {GeneratorsFactory} from \\\"../src/table2object\\\"\\n+```\\n+\\n+### Structure by selected columns\\n+Transform array - build structure grouping by selected columns\\n+\\n+\\n+```\\n+const data = [{},...,{}] // some array of rows/objects\\n+\\n+const specs:Specification = {                \\n+        propName: \\\"account\\\", // top level grouping - rows will be grouped by \\\"account\\\" column values\\n+        next: {\\n+            propName: \\\"project\\\", // middle level grouping - rows will be grouped by \\\"project\\\" column values\\n+            next: {\\n+                propName: \\\"oper\\\" // lowest level grouping - rows will be grouped by \\\"oper\\\" column values\\n+            }\\n+        }\\n+    }\\n+const result = transformer.transform(data, specs);\\n+```\\n+\\n+### Structure and generate aggregate values\\n+Transform array with aggregates - build structure grouping by selected columns and adding accumulation/aggregate values\\n+\\n+\\n+```\\n+const data = [{},...,{}] // some array of rows/objects\\n+\\n+const specs:Specification = {                \\n+        propName: \\\"account\\\", // top level grouping - rows will be grouped by \\\"account\\\" column values\\n+        next: {\\n+            propName: \\\"project\\\", // middle level grouping - rows will be grouped by \\\"project\\\" column values\\n+            accumulators: [AccumulatorsFactory.count(\\\"count\\\")], // for each value in \\\"project\\\" column a \\\"count\\\" aggregate will be calculated from rows\\n+            next: {\\n+                propName: \\\"oper\\\" // lowest level grouping - rows will be grouped by \\\"oper\\\" column values\\n+            }\\n+        }\\n+    }\\n+const result = transformer.transform(data, specs);\\n+```\\n+\\n+### Structure by custom function\\n+Transform array with aggregates and custom/generated/derived grouping values - build structure grouping by selected columns and adding accumulation/aggregate values, some structure level keys are generated using provided function\\n+\\n+\\n+```\\n+const data = [{},...,{}] // some array of rows/objects\\n+\\n+const specs:Specification = {                \\n+        propName: \\\"account\\\", // top level grouping - rows will be grouped by \\\"account\\\" column values\\n+        next: {\\n+            propName: \\\"project\\\", // middle level grouping - rows will be grouped by \\\"project\\\" column values\\n+            accumulators: [AccumulatorsFactory.count(\\\"count\\\")], // for each value in \\\"project\\\" column a \\\"count\\\" aggregate will be calculated from rows\\n+            next: {\\n+                propName: \\\"oper\\\" // middle level grouping - rows will be grouped by \\\"oper\\\" column values\\n+                next: {\\n+                  propGenerator: GeneratorsFactory.week(\\\"timestampColumn\\\"), // lowest level grouping - rows will be grouped by week number calculated from \\\"timestampColumn\\\" from data rows\\n+                }\\n+            }\\n+        }\\n+    }\\n+const result = transformer.transform(data, specs);\\n+```\\n+\\n+### Examples\\n+\\n+Rows data:\\n+\\n+```\\n+[\\n+  {\\n+    oper: 'commit',\\n+    account: 'acct1',\\n+    user: 'albert.einstein@mail.com',\\n+    project: 'project1',\\n+    id: 'wqp2yz9ibz8',\\n+    decoded: {\\n+      commit: 'commit 861c46520ff1c198a621510b6fae3bf8cebdac74',\\n+      changeSummary: [Object]\\n+    },\\n+    ct: 1693342741795,\\n+    e: { ec: 4.161, em: 3.48, et: 0, er: 4.818, ed: 4.194, e: 16.653 },\\n+    s: 116.7,\\n+    _rid: 'SLxNAIKMILO0AAAAAAAAAA==',\\n+    _self: 'dbs/SLxNAA==/colls/SLxNAIKMILM=/docs/SLxNAIKMILO0AAAAAAAAAA==/',\\n+    _etag: '\\\"d9001d2f-0000-0700-0000-64ee5c250000\\\"',\\n+    _attachments: 'attachments/',\\n+    _ts: 1693342757\\n+  },\\n+  {\\n+    oper: 'push',\\n+    account: 'acct1',\\n+    user: 'albert.einstein@mail.com',\\n+    project: 'project2',\\n+    id: '12jjb85rdce9',\\n+    decoded: {\\n+      commit: 'commit 9cd9a5adbbfbb842f220e32643502bd2f35ef8d0',\\n+      changeSummary: [Object]\\n+    },\\n+    ct: 1693342968768,\\n+    e: { ec: 4.036, em: 2.617, et: 0, er: 5.097, ed: 0, e: 11.75 },\\n+    s: 13,\\n+    _rid: 'SLxNAIKMILO1AAAAAAAAAA==',\\n+    _self: 'dbs/SLxNAA==/colls/SLxNAIKMILM=/docs/SLxNAIKMILO1AAAAAAAAAA==/',\\n+    _etag: '\\\"d9001f33-0000-0700-0000-64ee5d160000\\\"',\\n+    _attachments: 'attachments/',\\n+    _ts: 1693342998\\n+  },\\n+  {\\n+    oper: 'commit',\\n+    account: 'acct1',\\n+    user: 'john.doe@mail.com',\\n+    project: 'project1',\\n+    id: '5j4a6shjccq',\\n+    decoded: {\\n+      commit: 'commit 9cd9a5adbbfbb842f220e32643502bd2f35ef8d0',\\n+      changeSummary: [Object]\\n+    },\\n+    ct: 1693342964497,\\n+    e: { ec: 4.036, em: 2.617, et: 0, er: 5.097, ed: 4.963, e: 16.713 },\\n+    s: 0.3,\\n+    _rid: 'SLxNAIKMILO2AAAAAAAAAA==',\\n+    _self: 'dbs/SLxNAA==/colls/SLxNAIKMILM=/docs/SLxNAIKMILO2AAAAAAAAAA==/',\\n+    _etag: '\\\"d9002033-0000-0700-0000-64ee5d160000\\\"',\\n+    _attachments: 'attachments/',\\n+    _ts: 1693342998\\n+  },\\n+  {\\n+    oper: 'commit',\\n+    account: 'acct1',\\n+    user: 'isaac.newton@mail.com',\\n+    project: 'project2',\\n+    id: '9s7e1ewxaoe',\\n+    decoded: {\\n+      commit: 'commit 848504a842e81e7141f5e69c79a541ed3e31a6d9',\\n+      changeSummary: [Object]\\n+    },\\n+    ct: 1693344077023,\\n+    e: {\\n+      ec: 4.085,\\n+      em: 1.252,\\n+      et: 0,\\n+      er: 5.092,\\n+      ed: 5.106,\\n+      e: 15.534999999999998\\n+    },\\n+    s: 0.3,\\n+    _rid: 'SLxNAIKMILO3AAAAAAAAAA==',\\n+    _self: 'dbs/SLxNAA==/colls/SLxNAIKMILM=/docs/SLxNAIKMILO3AAAAAAAAAA==/',\\n+    _etag: '\\\"d900ef47-0000-0700-0000-64ee61510000\\\"',\\n+    _attachments: 'attachments/',\\n+    _ts: 1693344082\\n+  }\\n+]\\n+```\\n+\\n+#### Example #1\\n+\\n+Specification:\\n+```\\n+const specs:Specification = {                \\n+                propName: \\\"account\\\",\\n+                next: {\\n+                    propName: \\\"project\\\",\\n+                    next: {\\n+                        propName: \\\"oper\\\"\\n+                    }\\n+                }\\n+            }\\n+```\\n+\\n+Result:\\n+```\\n+{\\n+  rows: [\\n+    {\\n+      oper: 'commit',\\n+      account: 'acct1',\\n+      user: 'albert.einstein@mail.com',\\n+      project: 'project1',\\n+      id: 'wqp2yz9ibz8',\\n+      decoded: [Object],\\n+      ct: 1693342741795,\\n+      e: [Object],\\n+      s: 116.7,\\n+      _rid: 'SLxNAIKMILO0AAAAAAAAAA==',\\n+      _self: 'dbs/SLxNAA==/colls/SLxNAIKMILM=/docs/SLxNAIKMILO0AAAAAAAAAA==/',\\n+      _etag: '\\\"d9001d2f-0000-0700-0000-64ee5c250000\\\"',\\n+      _attachments: 'attachments/',\\n+      _ts: 1693342757\\n+    },\\n+    {\\n+      oper: 'push',\\n+      account: 'acct1',\\n+      user: 'albert.einstein@mail.com',\\n+      project: 'project2',\\n+      id: '12jjb85rdce9',\\n+      decoded: [Object],\\n+      ct: 1693342968768,\\n+      e: [Object],\\n+      s: 13,\\n+      _rid: 'SLxNAIKMILO1AAAAAAAAAA==',\\n+      _self: 'dbs/SLxNAA==/colls/SLxNAIKMILM=/docs/SLxNAIKMILO1AAAAAAAAAA==/',\\n+      _etag: '\\\"d9001f33-0000-0700-0000-64ee5d160000\\\"',\\n+      _attachments: 'attachments/',\\n+      _ts: 1693342998\\n+    },\\n+    {\\n+      oper: 'commit',\\n+      account: 'acct1',\\n+      user: 'john.doe@mail.com',\\n+      project: 'project1',\\n+      id: '5j4a6shjccq',\\n+      decoded: [Object],\\n+      ct: 1693342964497,\\n+      e: [Object],\\n+      s: 0.3,\\n+      _rid: 'SLxNAIKMILO2AAAAAAAAAA==',\\n+      _self: 'dbs/SLxNAA==/colls/SLxNAIKMILM=/docs/SLxNAIKMILO2AAAAAAAAAA==/',\\n+      _etag: '\\\"d9002033-0000-0700-0000-64ee5d160000\\\"',\\n+      _attachments: 'attachments/',\\n+      _ts: 1693342998\\n+    },\\n+    {\\n+      oper: 'commit',\\n+      account: 'acct1',\\n+      user: 'isaac.newton@mail.com',\\n+      project: 'project2',\\n+      id: '9s7e1ewxaoe',\\n+      decoded: [Object],\\n+      ct: 1693344077023,\\n+      e: [Object],\\n+      s: 0.3,\\n+      _rid: 'SLxNAIKMILO3AAAAAAAAAA==',\\n+      _self: 'dbs/SLxNAA==/colls/SLxNAIKMILM=/docs/SLxNAIKMILO3AAAAAAAAAA==/',\\n+      _etag: '\\\"d900ef47-0000-0700-0000-64ee61510000\\\"',\\n+      _attachments: 'attachments/',\\n+      _ts: 1693344082\\n+    }\\n+  ],\\n+  acct1: {\\n+    rows: [ [Object], [Object], [Object], [Object] ],\\n+    project1: { rows: [Array], commit: [Object] },\\n+    project2: { rows: [Array], push: [Object], commit: [Object] }\\n+  }\\n+}\\n+```\\n+\\n+\\n+## API specification\\n+\\n+### Specification\\n+\\n+Informs transformer how to change rows of data into a structure of Levels' objects\\n+\\n+```\\n+/**\\n+ * Specifies how to transfer array of objects into structure\\n+ */\\n+interface Specification{\\n+    propName: string,\\n+    accumulators?: AccumulatorFunction[],\\n+    next?: Specification|FunctionalSpecification\\n+}\\n+/**\\n+ * Extension that allows for building structure keys using custom function instead of an existing property/column in\\n+ * array data\\n+ */\\n+interface FunctionalSpecification extends Omit<Specification,\\\"propName\\\">{\\n+    propGenerator: GeneratorFunction\\n+}\\n+```\\n+\\n+### Level\\n+\\n+Transformation result - structure of levels - structured data holding source rows:\\n+```\\n+/**\\n+ * Building block of a result object that is generated from array of data\\n+ */\\n+interface Level {   \\n+    [index: string]: Level|any\\n+    rows?: any[],\\n+    accumulators?:Accumulators\\n+}\\n+```\\n+\\n+### Accumualators\\n+Accumulators calculated accumulated values for each level (where specified)\\n+\\n+#### AccumulatorsFactory.sum(propName: string, by: string)\\n+Calculates sum of values from the \\\"by\\\" property of source rows. Result is stored in \\\"propName\\\" accumulator property.\\n+\\n+#### AccumulatorsFactory.sum(propName: string, by: string)\\n+Calculates count of rows at given level. Result is stored in \\\"propName\\\" accumulator property.\\n+\\n+### Generators\\n+Generators provide custom level grouping keys/properties (instead of using source row columns)\\n+\\n+#### GeneratorsFactory.day(tsPropName: string)\\n+Level will be stored at timestamp day value from a \\\"tsPropName\\\" timestamp source row column\\n+\\n+#### GeneratorsFactory.week(tsPropName: string)\\n+Level will be stored at week number (1-52) value from a \\\"tsPropName\\\" timestamp source row column.\\n+\\n+#### GeneratorsFactory.month(tsPropName: string)\\n+Level will be stored at timestamp first day of month value from a \\\"tsPropName\\\" timestamp source row column.\\ndiff --git a/rollup.config.js b/rollup.config.js\\nnew file mode 100755\\nindex 0000000..e0e131b\\n--- /dev/null\\n+++ b/rollup.config.js\\n@@ -0,0 +1,19 @@\\n+import typescript from '@rollup/plugin-typescript';\\n+// import { nodeResolve } from '@rollup/plugin-node-resolve';\\n+\\n+export default {\\n+  input: 'src/q247-models.ts',\\n+  output: [\\n+    {\\n+      file: 'dist/q247-models.esm.js',\\n+      format: 'es'\\n+    },\\n+    {\\n+      file: 'dist/q247-models.umd.js',\\n+      format: 'umd',\\n+      name: 'q247-models',\\n+    }\\n+  ],   \\n+  // plugins: [typescript(), nodeResolve()],\\n+  plugins: [typescript()],\\n+};\\ndiff --git a/rollup.npmlib.config.js b/rollup.npmlib.config.js\\nnew file mode 100755\\nindex 0000000..ce916ec\\n--- /dev/null\\n+++ b/rollup.npmlib.config.js\\n@@ -0,0 +1,20 @@\\n+import typescript from '@rollup/plugin-typescript';\\n+\\n+export default {\\n+  input: 'src/gameyngine.ts',\\n+  output: [\\n+    {\\n+      file: 'dist/gameyngine.esm.js',\\n+      format: 'es',\\n+      globals: { three: 'THREE' }\\n+    },\\n+    {\\n+      file: 'dist/gameyngine.umd.js',\\n+      format: 'umd',\\n+      name: 'gngine',\\n+      globals: { three: 'THREE' }\\n+    },\\n+  ],\\n+  external:['three'],\\n+  plugins: [typescript()],\\n+};\\ndiff --git a/src/iface/event.ts b/src/iface/event.ts\\nnew file mode 100644\\nindex 0000000..4a537d8\\n--- /dev/null\\n+++ b/src/iface/event.ts\\n@@ -0,0 +1,24 @@\\n+export interface Decoded{\\n+    ticket:string; // id of the ticket\\n+    ticketPrefix:string; //ticket prefix, usually this should map to external project id/code\\n+    commit:string; // - commit line with commit hash\\n+    author:any // author data\\n+    date:string // date line\\n+    message:string // change message\\n+    changes:string // changes lines\\n+    changeSummary:any // summary of changes\\n+}\\n+export interface Event{\\n+    version: string;\\n+    oper: \\\"commit\\\"|\\\"push\\\";\\n+    remote: string;\\n+    account: string;\\n+    user: string;\\n+    project: string;\\n+    id: string;\\n+    decoded: Decoded;\\n+    ct: number;\\n+    tenantId: string;\\n+    gitlog: string;\\n+    diff: string\\n+}\\n\\\\ No newline at end of file\\ndiff --git a/src/iface/model.ts b/src/iface/model.ts\\nnew file mode 100644\\nindex 0000000..63ce2e8\\n--- /dev/null\\n+++ b/src/iface/model.ts\\n@@ -0,0 +1,21 @@\\n+\\n+import {Event} from \\\"./event\\\";\\n+\\n+export interface Score {\\n+    id: string; // score unique id\\n+    model: ScoreModelCard;\\n+    event: Event; // source event that was scored\\n+}\\n+\\n+export interface ScalarScore extends Score{    \\n+    score: number\\n+}\\n+\\n+export interface ScoreModelCard {\\n+    name: string;\\n+    version: string;\\n+}\\n+\\n+export interface ScoreModel extends ScoreModelCard{           \\n+    score: (event:Event) => Promise<Score>;\\n+}\\n\\\\ No newline at end of file\\ndiff --git a/src/implementation/shanon-entropy/index.ts b/src/implementation/shanon-entropy/index.ts\\nnew file mode 100644\\nindex 0000000..d8d68c8\\n--- /dev/null\\n+++ b/src/implementation/shanon-entropy/index.ts\\n@@ -0,0 +1,125 @@\\n+import { Event } from \\\"../../iface/event\\\";\\n+import { ScalarScore, ScoreModel } from \\\"../../iface/model\\\";\\n+\\n+export class ShanonEntropyScoreModelV1 implements ScoreModel {\\n+    \\n+    name = \\\"ShanonEntropyScoreModel\\\";\\n+    version = \\\"1.0\\\";\\n+\\n+    score(event: Event): Promise<ScalarScore> {\\n+        const scoreScalar = this._score(event);        \\n+        return Promise.resolve({\\n+            id: `${Math.random().toString(36).substring(2, 12)}`,\\n+            model: {\\n+                name: this.name,\\n+                version: this.version\\n+            },\\n+            event: event,\\n+            score: scoreScalar\\n+        })\\n+    }    \\n+    _score(item:Event){\\n+        let score = 0; // initialize score\\n+\\n+        const entropy = this._calculateEntropyScope(item);\\n+\\n+        // 1/10 of the entropy score extra can be gained by number of lines\\n+        \\n+\\n+        // you get 100 points for each push\\n+        if(item.oper == \\\"push\\\"){\\n+            score+=13\\n+            return score;\\n+        }\\n+        let insertDelScore = 0\\n+        // and point for each insertion, deletion\\n+        insertDelScore += item.decoded.changeSummary.inserts;\\n+        insertDelScore += item.decoded.changeSummary.deletions;\\n+\\n+        score = entropy.e*insertDelScore/100\\n+\\n+        score = parseFloat(score.toFixed(2))\\n+\\n+        return score;\\n+    }\\n+\\n+    _calculateEntropyScope(gitEvent:Event){\\n+        /*\\n+        * @typedef {Object} GitEventEntropyScore\\n+        * @property {number} ec - commit line entropy\\n+        * @property {number} em - commit message entropy\\n+        * @property {number} et - ticket entropy\\n+        * @property {number} er - raw message entropy\\n+        * @property {number} ed - diff entropy\\n+        * @property {number} e - final entropy\\n+        */\\n+        const weights = {\\n+            ec: 1,\\n+            em: 1,\\n+            et: 1,\\n+            er: 1,\\n+            ed: 1\\n+        }        \\n+        const entropy = {            \\n+            ec: this._entropy(Array.from(gitEvent.decoded.commit||\\\"\\\"))*weights[\\\"ec\\\"],\\n+            em: this._entropy(Array.from(gitEvent.decoded.message||\\\"\\\"))*weights[\\\"em\\\"],\\n+            et: this._entropy(Array.from(gitEvent.decoded.ticket||\\\"\\\"))*weights[\\\"et\\\"],\\n+            er: this._entropy(Array.from(gitEvent.gitlog||\\\"\\\"))*weights[\\\"er\\\"],\\n+            ed: this._entropy(Array.from(gitEvent.diff||\\\"\\\"))*weights[\\\"ed\\\"],\\n+            e: 0,\\n+            w: {\\n+                ec: this._entropy(gitEvent.decoded.commit?gitEvent.decoded.commit.split(/\\\\W+/gi):[]),\\n+                em: this._entropy(gitEvent.decoded.message?gitEvent.decoded.message.split(/\\\\W+/gi):[]),\\n+                et: this._entropy(gitEvent.decoded.ticket?gitEvent.decoded.ticket.split(/\\\\W+/gi):[]),\\n+                er: this._entropy(gitEvent.gitlog?gitEvent.gitlog.split(/\\\\W+/gi):[]),\\n+                ed: this._entropy(gitEvent.diff?gitEvent.diff.split(/\\\\W+/gi):[]),\\n+            }     \\n+        }\\n+\\n+        entropy.e = entropy.ec+entropy.em+entropy.et+entropy.er+entropy.ed;\\n+\\n+        return entropy;\\n+\\n+    }\\n+\\n+    // _entropy(str:any){\\n+    //     const len = str.length\\n+ \\n+    //     // Build a frequency map from the string.\\n+    //     const frequencies:any = Array.from(str)\\n+    //       .reduce((freq:any, c:any) => (freq[c] = (freq[c] || 0) + 1) && freq, {})\\n+       \\n+    //     // Sum the frequency of each character.\\n+    //     const sum:any = Object.values(frequencies)\\n+    //       .reduce((sum:any, f:any) => sum - f/len * Math.log2(f/len), 0)        \\n+    //     return parseFloat(sum.toFixed(3));\\n+    // }\\n+\\n+    _entropy(arr:any[]){\\n+        const len = arr.length\\n+ \\n+        // Build a frequency map from the string.\\n+        const frequencies:any = arr\\n+          .reduce((freq:any, c:any) => (freq[c] = (freq[c] || 0) + 1) && freq, {})\\n+       \\n+        // Sum the frequency of each character.\\n+        const sum:any = Object.values(frequencies)\\n+          .reduce((sum:any, f:any) => sum - f/len * Math.log2(f/len), 0)        \\n+        return parseFloat(sum.toFixed(3));\\n+    }\\n+    // _entropyWords(str:any){\\n+    //     const words = str.split(\\\"\\\\\\\\W+\\\");\\n+    //     const len = words.length\\n+ \\n+    //     // Build a frequency map from the string.\\n+    //     const frequencies:any = words\\n+    //       .reduce((freq:any, c:any) => (freq[c] = (freq[c] || 0) + 1) && freq, {})\\n+       \\n+    //     // Sum the frequency of each word.\\n+    //     const sum:any = Object.values(frequencies)\\n+    //       .reduce((sum:any, f:any) => sum - f/len * Math.log2(f/len), 0)        \\n+    //     return parseFloat(sum.toFixed(3));\\n+    // }\\n+    \\n+    \\n+}\\n\\\\ No newline at end of file\\ndiff --git a/src/q247-models.ts b/src/q247-models.ts\\nnew file mode 100644\\nindex 0000000..3217067\\n--- /dev/null\\n+++ b/src/q247-models.ts\\n@@ -0,0 +1,4 @@\\n+/* istanbul ignore file */\\n+export type {ScalarScore, Score, ScoreModel, ScoreModelCard} from \\\"./iface/model\\\"\\n+export type {Event, Decoded} from \\\"./iface/event\\\"\\n+export {ShanonEntropyScoreModelV1} from \\\"./implementation/shanon-entropy\\\"\\ndiff --git a/test/data.mock.ts b/test/data.mock.ts\\nnew file mode 100644\\nindex 0000000..0e89ebb\\n--- /dev/null\\n+++ b/test/data.mock.ts\\n@@ -0,0 +1,35 @@\\n+export const MOCKS = {\\n+    hookEvents:{\\n+        one: {\\n+            gitlog: \\\"commit 5fc617ef5ede5d7ff6ffef0ba3205afe3e2a337e\\\\nAuthor: Maciej Grula <maciej.grula@execon.pl>\\\\nDate:   Sat Jun 8 18:44:46 2024 +0200\\\\n\\\\n    PWR-01 cleaning\\\\n\\\\n index.js | 5 +----\\\\n 1 file changed, 1 insertion(+), 4 deletions(-)\\\\n\\\",\\n+            oper: \\\"commit\\\",\\n+            remote: \\\"/Users/grulka/Documents/Projekty/gitspace/private/grm-microservices/process\\\",\\n+            diff: \\\"commit 5fc617ef5ede5d7ff6ffef0ba3205afe3e2a337e\\\\nAuthor: Maciej Grula <maciej.grula@execon.pl>\\\\nDate:   Sat Jun 8 18:44:46 2024 +0200\\\\n\\\\n    PWR-01 cleaning\\\\n\\\\ndiff --git a/index.js b/index.js\\\\nindex d7c4190..d232a53 100644\\\\n--- a/index.js\\\\n+++ b/index.js\\\\n@@ -101,11 +101,8 @@ function attachNewPostOperation(appHandler, version, path, context, operationHan\\\\n attachNewGetOperation(app, version, path, \\\\\\\"/transition/available/:typeId/:entityId\\\\\\\", manager.availableTransitions.bind(manager));\\\\n attachNewPostOperation(app, version, path, \\\\\\\"/transition/execute/:typeId/:entityId/:transitionCode\\\\\\\", manager.transitionExecute.bind(manager));\\\\n attachNewPostOperation(app, version, path, \\\\\\\"/instance/:typeId/:entityId\\\\\\\", manager.postProcessInstance.bind(manager));\\\\n-\\\\n attachNewGetOperation(app, version, path, \\\\\\\"/instance/:typeId/:entityId\\\\\\\", manager.getProcessInstance.bind(manager));\\\\n-\\\\n attachNewGetOperation(app, version, path, \\\\\\\"/definition/:typeId\\\\\\\", manager.getProcessDefinition.bind(manager));\\\\n attachNewPostOperation(app, version, path, \\\\\\\"/definition/:typeId\\\\\\\", manager.postProcessDefinition.bind(manager));\\\\n \\\\n-attachNewGetOperation(app, version, path, \\\\\\\"/instance/:typeId/:entityId/history\\\\\\\", manager.getProcessInstanceHistory.bind(manager));\\\\n-\\\\n+attachNewGetOperation(app, version, path, \\\\\\\"/instance/:typeId/:entityId/history\\\\\\\", manager.getProcessInstanceHistory.bind(manager));\\\\n\\\\\\\\ No newline at end of file\\\\n\\\",\\n+            account: \\\"a_execon\\\",\\n+            user: \\\"maciej.grula@execon.pl\\\",\\n+            project: \\\"4r3t7x7fj6\\\",\\n+            id: \\\"xj8d6c840o\\\",\\n+            ct: 1718393469569,\\n+            decoded: {\\n+              ticket: \\\"PWR-01\\\",\\n+              ticketPrefix: \\\"PWR\\\",\\n+              commit: \\\"commit 5fc617ef5ede5d7ff6ffef0ba3205afe3e2a337e\\\",\\n+              author: {\\n+                name: \\\"Maciej Grula\\\",\\n+                email: \\\"maciej.grula@execon.pl\\\",\\n+              },\\n+              date: \\\"Date:   Sat Jun 8 18:44:46 2024 +0200\\\",\\n+              message: \\\"PWR-01 cleaning\\\",\\n+              changes: [\\n+                \\\" index.js | 5 +----\\\",\\n+              ],\\n+              changeSummary: {\\n+                raw: \\\" 1 file changed, 1 insertion(+), 4 deletions(-)\\\",\\n+                files: 1,\\n+                inserts: 1,\\n+                deletions: 4,\\n+              },\\n+            },\\n+          }\\n+        }\\n+}\\n\\\\ No newline at end of file\\ndiff --git a/test/main.test.ts b/test/main.test.ts\\nnew file mode 100644\\nindex 0000000..a3ab109\\n--- /dev/null\\n+++ b/test/main.test.ts\\n@@ -0,0 +1,32 @@\\n+// import chai, { assert } from 'chai'\\n+import chai from 'chai'\\n+import chaiAsPromised from 'chai-as-promised'\\n+\\n+\\n+chai.should();\\n+chai.use(chaiAsPromised);\\n+\\n+// const assert = chai.assert;\\n+\\n+const expect = chai.expect;\\n+\\n+// import sinon, { SinonStub } from 'sinon';\\n+\\n+\\n+import {ShanonEntropyScoreModelV1, Event} from \\\"../src/q247-models\\\"\\n+\\n+\\n+\\n+import {MOCKS} from \\\"./data.mock\\\"\\n+\\n+describe(\\\"Models\\\",()=>{\\n+    describe(\\\"ShanonEntropyScoreModelV1\\\",()=>{\\n+        it(\\\"\\\",async ()=>{\\n+            const model = new ShanonEntropyScoreModelV1();            \\n+            const score = await model.score((<any>MOCKS.hookEvents.one) as Event);\\n+            expect(score.score).gt(0);\\n+        })\\n+    })\\n+})\\n+\\n+\\ndiff --git a/tsconfig-test.json b/tsconfig-test.json\\nnew file mode 100755\\nindex 0000000..b6b2e1d\\n--- /dev/null\\n+++ b/tsconfig-test.json\\n@@ -0,0 +1,69 @@\\n+{\\n+  \\\"compilerOptions\\\": {\\n+    /* Basic Options */\\n+    // \\\"incremental\\\": true,                   /* Enable incremental compilation */\\n+    \\\"target\\\": \\\"ES2019\\\" /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */,\\n+    \\\"module\\\": \\\"commonjs\\\" /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */,\\n+    // \\\"lib\\\": [],                             /* Specify library files to be included in the compilation. */\\n+    // \\\"allowJs\\\": true,                       /* Allow javascript files to be compiled. */\\n+    // \\\"checkJs\\\": true,                       /* Report errors in .js files. */\\n+    // \\\"jsx\\\": \\\"preserve\\\",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */\\n+    // \\\"declaration\\\": true,                   /* Generates corresponding '.d.ts' file. */\\n+    // \\\"declarationMap\\\": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */\\n+    // \\\"sourceMap\\\": true,                     /* Generates corresponding '.map' file. */\\n+    // \\\"outFile\\\": \\\"./\\\",                       /* Concatenate and emit output to single file. */\\n+    // \\\"outDir\\\": \\\"./dist\\\" /* Redirect output structure to the directory. */,\\n+    // \\\"rootDir\\\": \\\"./\\\",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */\\n+    // \\\"composite\\\": true,                     /* Enable project compilation */\\n+    // \\\"tsBuildInfoFile\\\": \\\"./\\\",               /* Specify file to store incremental compilation information */\\n+    // \\\"removeComments\\\": true,                /* Do not emit comments to output. */\\n+    // \\\"noEmit\\\": true,                        /* Do not emit outputs. */\\n+    // \\\"importHelpers\\\": true,                 /* Import emit helpers from 'tslib'. */\\n+    // \\\"downlevelIteration\\\": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */\\n+    // \\\"isolatedModules\\\": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */\\n+\\n+    /* Strict Type-Checking Options */\\n+    \\\"strict\\\": true /* Enable all strict type-checking options. */,\\n+    // \\\"noImplicitAny\\\": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */\\n+    // \\\"strictNullChecks\\\": true,              /* Enable strict null checks. */\\n+    // \\\"strictFunctionTypes\\\": true,           /* Enable strict checking of function types. */\\n+    // \\\"strictBindCallApply\\\": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */\\n+    // \\\"strictPropertyInitialization\\\": true,  /* Enable strict checking of property initialization in classes. */\\n+    // \\\"noImplicitThis\\\": true,                /* Raise error on 'this' expressions with an implied 'any' type. */\\n+    // \\\"alwaysStrict\\\": true,                  /* Parse in strict mode and emit \\\"use strict\\\" for each source file. */\\n+\\n+    /* Additional Checks */\\n+    \\\"noUnusedLocals\\\": true /* Report errors on unused locals. */,\\n+    \\\"noUnusedParameters\\\": true /* Report errors on unused parameters. */,\\n+    \\\"noImplicitReturns\\\": true /* Report error when not all code paths in function return a value. */,\\n+    \\\"noFallthroughCasesInSwitch\\\": true /* Report errors for fallthrough cases in switch statement. */,\\n+\\n+    /* Module Resolution Options */\\n+    \\\"moduleResolution\\\": \\\"node\\\" /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */,\\n+    // \\\"baseUrl\\\": \\\"./\\\",                       /* Base directory to resolve non-absolute module names. */\\n+    // \\\"paths\\\": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */\\n+    // \\\"rootDirs\\\": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */\\n+    // \\\"typeRoots\\\": [],                       /* List of folders to include type definitions from. */\\n+    // \\\"types\\\": [],                           /* Type declaration files to be included in compilation. */\\n+    // \\\"allowSyntheticDefaultImports\\\": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */\\n+    \\\"esModuleInterop\\\": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,\\n+    // \\\"preserveSymlinks\\\": true,              /* Do not resolve the real path of symlinks. */\\n+    // \\\"allowUmdGlobalAccess\\\": true,          /* Allow accessing UMD globals from modules. */\\n+\\n+    /* Source Map Options */\\n+    // \\\"sourceRoot\\\": \\\"\\\",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */\\n+    // \\\"mapRoot\\\": \\\"\\\",                         /* Specify the location where debugger should locate map files instead of generated locations. */\\n+    \\\"inlineSourceMap\\\": true,               /* Emit a single file with source maps instead of having a separate file. */\\n+    // \\\"inlineSources\\\": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */\\n+\\n+    /* Experimental Options */\\n+    // \\\"experimentalDecorators\\\": true,        /* Enables experimental support for ES7 decorators. */\\n+    // \\\"emitDecoratorMetadata\\\": true,         /* Enables experimental support for emitting type metadata for decorators. */\\n+    \\\"skipLibCheck\\\": true,\\n+    /* Advanced Options */\\n+    \\\"forceConsistentCasingInFileNames\\\": true /* Disallow inconsistently-cased references to the same file. */\\n+    \\n+  },\\n+  \\\"include\\\": [\\\"src\\\"],\\n+  \\\"exclude\\\": [\\\"node_modules\\\", \\\"dist\\\", \\\"**/*.test.ts\\\", \\\"**/*.spec.ts\\\", \\\"test\\\", \\\"coverage\\\"]\\n+}\\ndiff --git a/tsconfig.json b/tsconfig.json\\nnew file mode 100755\\nindex 0000000..373ab17\\n--- /dev/null\\n+++ b/tsconfig.json\\n@@ -0,0 +1,71 @@\\n+{\\n+  \\\"compilerOptions\\\": {\\n+    /* Basic Options */\\n+    // \\\"incremental\\\": true,                   /* Enable incremental compilation */\\n+    \\\"target\\\": \\\"ES2019\\\" /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */,\\n+    \\\"module\\\": \\\"esnext\\\" /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */,\\n+    // \\\"lib\\\": [],                             /* Specify library files to be included in the compilation. */\\n+    // \\\"allowJs\\\": true,                       /* Allow javascript files to be compiled. */\\n+    // \\\"checkJs\\\": true,                       /* Report errors in .js files. */\\n+    // \\\"jsx\\\": \\\"preserve\\\",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */\\n+    // \\\"declaration\\\": true,                   /* Generates corresponding '.d.ts' file. */\\n+    // \\\"declarationMap\\\": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */\\n+    // \\\"sourceMap\\\": true,                     /* Generates corresponding '.map' file. */\\n+    // \\\"outFile\\\": \\\"./\\\",                       /* Concatenate and emit output to single file. */\\n+    // \\\"outDir\\\": \\\"./dist\\\" /* Redirect output structure to the directory. */,\\n+    // \\\"rootDir\\\": \\\"./\\\",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */\\n+    // \\\"composite\\\": true,                     /* Enable project compilation */\\n+    // \\\"tsBuildInfoFile\\\": \\\"./\\\",               /* Specify file to store incremental compilation information */\\n+    // \\\"removeComments\\\": true,                /* Do not emit comments to output. */\\n+    // \\\"noEmit\\\": true,                        /* Do not emit outputs. */\\n+    // \\\"importHelpers\\\": true,                 /* Import emit helpers from 'tslib'. */\\n+    // \\\"downlevelIteration\\\": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */\\n+    // \\\"isolatedModules\\\": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */\\n+\\n+    /* Strict Type-Checking Options */\\n+    \\\"strict\\\": true /* Enable all strict type-checking options. */,\\n+    // \\\"noImplicitAny\\\": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */\\n+    // \\\"strictNullChecks\\\": true,              /* Enable strict null checks. */\\n+    // \\\"strictFunctionTypes\\\": true,           /* Enable strict checking of function types. */\\n+    // \\\"strictBindCallApply\\\": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */\\n+    // \\\"strictPropertyInitialization\\\": true,  /* Enable strict checking of property initialization in classes. */\\n+    // \\\"noImplicitThis\\\": true,                /* Raise error on 'this' expressions with an implied 'any' type. */\\n+    // \\\"alwaysStrict\\\": true,                  /* Parse in strict mode and emit \\\"use strict\\\" for each source file. */\\n+\\n+    /* Additional Checks */\\n+    \\\"noUnusedLocals\\\": true /* Report errors on unused locals. */,\\n+    \\\"noUnusedParameters\\\": true /* Report errors on unused parameters. */,\\n+    \\\"noImplicitReturns\\\": true /* Report error when not all code paths in function return a value. */,\\n+    \\\"noFallthroughCasesInSwitch\\\": true /* Report errors for fallthrough cases in switch statement. */,\\n+\\n+    /* Module Resolution Options */\\n+    \\\"moduleResolution\\\": \\\"node\\\" /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */,\\n+    // \\\"baseUrl\\\": \\\"./\\\",                       /* Base directory to resolve non-absolute module names. */\\n+    // \\\"paths\\\": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */\\n+    // \\\"rootDirs\\\": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */\\n+    // \\\"typeRoots\\\": [],                       /* List of folders to include type definitions from. */\\n+    \\\"types\\\": [\\n+      \\\"node\\\"\\n+    ],                           /* Type declaration files to be included in compilation. */\\n+    // \\\"allowSyntheticDefaultImports\\\": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */\\n+    \\\"esModuleInterop\\\": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,\\n+    // \\\"preserveSymlinks\\\": true,              /* Do not resolve the real path of symlinks. */\\n+    // \\\"allowUmdGlobalAccess\\\": true,          /* Allow accessing UMD globals from modules. */\\n+\\n+    /* Source Map Options */\\n+    // \\\"sourceRoot\\\": \\\"\\\",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */\\n+    // \\\"mapRoot\\\": \\\"\\\",                         /* Specify the location where debugger should locate map files instead of generated locations. */\\n+    // \\\"inlineSourceMap\\\": true,               /* Emit a single file with source maps instead of having a separate file. */\\n+    // \\\"inlineSources\\\": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */\\n+\\n+    /* Experimental Options */\\n+    // \\\"experimentalDecorators\\\": true,        /* Enables experimental support for ES7 decorators. */\\n+    // \\\"emitDecoratorMetadata\\\": true,         /* Enables experimental support for emitting type metadata for decorators. */\\n+    \\\"skipLibCheck\\\": true,\\n+    /* Advanced Options */\\n+    \\\"forceConsistentCasingInFileNames\\\": true /* Disallow inconsistently-cased references to the same file. */\\n+    \\n+  },\\n+  \\\"include\\\": [\\\"src\\\"],\\n+  \\\"exclude\\\": [\\\"node_modules\\\", \\\"dist\\\", \\\"**/*.test.ts\\\", \\\"**/*.spec.ts\\\", \\\"test\\\", \\\"coverage\\\"]\\n+}\\n\",\n+            account: \"a_execon_group\",\n+            user: \"maciej.grula+1@execon.pl\",\n+            project: \"otqu6a9qqv\",\n+            id: \"ay5x0mfjgaj\",\n+            ct: 1718442930859,\n+            decoded: {\n+              ticket: undefined,\n+              ticketPrefix: undefined,\n+              commit: \"commit 50a53e2eb9872a46a6c1359ad7f8ea88d6090a52\",\n+              author: {\n+                name: \"Maciej Grula\",\n+                email: \"maciej.grula@execon.pl\",\n+              },\n+              date: \"Date:   Sat Jun 15 11:15:30 2024 +0200\",\n+              message: \"initial\",\n+              changes: [\n+                \" package.json                               |  94 ++++++++\",\n+                \" readme.MD                                  | 351 +++++++++++++++++++++++++++++\",\n+                \" rollup.config.js                           |  19 ++\",\n+                \" rollup.npmlib.config.js                    |  20 ++\",\n+                \" src/iface/event.ts                         |  24 ++\",\n+                \" src/iface/model.ts                         |  21 ++\",\n+                \" src/implementation/shanon-entropy/index.ts | 125 ++++++++++\",\n+                \" src/q247-models.ts                         |   4 +\",\n+                \" test/data.mock.ts                          |  35 +++\",\n+                \" test/main.test.ts                          |  32 +++\",\n+                \" tsconfig-test.json                         |  69 ++++++\",\n+                \" tsconfig.json                              |  71 ++++++\",\n+              ],\n+              changeSummary: {\n+                raw: \" 12 files changed, 865 insertions(+)\",\n+                files: 12,\n+                inserts: 865,\n+                deletions: 0,\n+              },\n+            },\n         }\n }\n\\ No newline at end of file\n",
            account: "a_execon_group",
            user: "maciej.grula+1@execon.pl",
            project: "otqu6a9qqv",
            id: "a4r1o915byt",
            ct: 1718443032471,
            decoded: {
              ticket: "EXEFPQ247-2",
              ticketPrefix: "EXEFPQ247",
              commit: "commit f4eae911de45aa6b80dc05427e95237915159426",
              author: {
                name: "Maciej Grula",
                email: "maciej.grula@execon.pl",
              },
              date: "Date:   Sat Jun 15 11:17:12 2024 +0200",
              message: "EXEFPQ247-2 test data preparation",
              changes: [
                " test/data.mock.ts | 42 ++++++++++++++++++++++++++++++++++++++++++",
              ],
              changeSummary: {
                raw: " 1 file changed, 42 insertions(+)",
                files: 1,
                inserts: 42,
                deletions: 0,
              },
            },
        }
    }   
}